{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","zipcode","phone","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","address","SearchBox","searchfield","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","_this2","fetch","then","response","json","users","_this$props","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6QAqBeA,EAnBF,SAAAC,GAAiC,IAA/BC,EAA+BD,EAA/BC,KAAKC,EAA0BF,EAA1BE,MAAMC,EAAoBH,EAApBG,GAAGC,EAAiBJ,EAAjBI,QAAQC,EAASL,EAATK,MACjC,OACFC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAK,SAASC,IAAG,wBAAAC,OAA0BT,EAA1B,cACtBG,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAAKP,EAAL,KACAK,EAAAC,EAAAC,cAAA,SAAIN,GACJI,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,SAAIH,MCcKQ,EAtBE,SAAAb,GAAa,IAAXc,EAAWd,EAAXc,OAEX,OACIR,EAAAC,EAAAC,cAAA,WAERM,EAAOC,IAAI,SAACC,EAAKC,GACb,OACJX,EAAAC,EAAAC,cAACU,EAAD,CACAC,IAAMF,EACLd,GAAIW,EAAOG,GAAGd,GACdF,KAAMa,EAAOG,GAAGhB,KAChBC,MAAOY,EAAOG,GAAGf,MAClBE,QAASU,EAAOG,GAAGG,QAAQhB,QAC3BC,MAASS,EAAOG,GAAGZ,YCDRgB,EAZG,SAAArB,GAAgCA,EAA9BsB,YAA8B,IAAlBC,EAAkBvB,EAAlBuB,aAC5B,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OAEhBH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,uCAAwCe,SAAUD,EAAeE,KAAO,SAASC,YAAc,oBCKzGC,SATA,SAACC,GACZ,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,MAAQ,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC5DJ,EAAMK,YCuBJC,cA1BX,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KACDc,MAAO,CACPC,UAAW,GAHDR,iFAOLS,EAAOC,GACrBP,KAAKQ,SAAS,CAACH,UAAW,qCAMrB,OAAIL,KAAKI,MAAMC,SACTrC,EAAAC,EAAAC,cAAA,gCAGN8B,KAAKV,MAAMK,gBAnBQc,aCqBtBC,cAEF,SAAAA,IAAc,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACVb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,QACKI,MAAQ,CACT5B,OAAQ,IAHFqB,mFAOM,IAAAc,EAAAX,KAEhBY,MAAM,8CAA8CC,KAAK,SAAAC,GACrD,OAAOA,EAASC,SAEfF,KAAK,SAAAG,GACFL,EAAKH,SAAS,CAAEhC,OAAQwC,uCAI3B,IACGxC,EAAWwB,KAAKI,MAAhB5B,OADHyC,EAEmCjB,KAAKV,MAArC4B,EAFHD,EAEGC,YAAaC,EAFhBF,EAEgBE,eACfC,EAAiB5C,EAAO6C,OAAO,SAAAC,GACjC,OAAOA,EAAM3D,KAAK4D,cAAcC,SAASN,EAAYK,iBAMzD,OAAQ/C,EAAOiD,OAGXzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAEXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,kBAEAH,EAAAC,EAAAC,cAACwD,EAAD,CAAWzC,aAAckC,IAEzBnD,EAAAC,EAAAC,cAACyD,EAAD,KACI3D,EAAAC,EAAAC,cAAC0D,EAAD,KACI5D,EAAAC,EAAAC,cAAC2D,EAAD,CAAUrD,OAAQ4C,OAV9BpD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,kBA9BMsC,aAmDHqB,cA/DS,SAAC1B,GACrB,MAAO,CACHc,YAAad,EAAMc,cAIA,SAACa,GACxB,MAAO,CACHZ,eAAgB,SAACa,GAAD,OAAWD,ECfK,CACpC5C,KCL+B,sBDM/B8C,QDauDD,EAAME,OAAOC,WAuDzDL,CAA6CpB,GG9DxC0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfN,IAAMC,EAAe,CACjBvB,YAAc,ICOZwB,SAAQC,YDFc,WAAkC,IAAjCvC,EAAiCwC,UAAAnB,OAAA,QAAAoB,IAAAD,UAAA,GAAAA,UAAA,GAA3BH,EAAaK,EAAcF,UAAAnB,OAAA,QAAAoB,IAAAD,UAAA,GAAAA,UAAA,GAAP,GACnD,OAAOE,EAAO3D,MACV,IFX2B,sBEY3B,OAAQW,OAAOiD,OAAO,GAAG3C,EAAM,CAACc,YAAY4B,EAAOb,UACnD,QACA,OAAO7B,MCAf4C,IAASC,OAESjF,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAUR,MAASA,GACnB1E,EAAAC,EAAAC,cAACiF,EAAD,MADA,KAECC,SAASC,eAAe,SF+GrC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.4ff2e6d2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id,zipcode,phone})=>{   \r\n    return(\r\n  <div className=' tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5 '>\r\n      <img alt ='robots' src={`https://robohash.org/${id}?200x200` } / >\r\n      <div>\r\n\r\n      <h2>{name} </h2>\r\n      <p>{email}</p>\r\n      <p>{zipcode}</p>\r\n      <p>{phone}</p>\r\n  \r\n      </div>\r\n     \r\n   </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n   \r\n        return(\r\n            <div>\r\n          {\r\n    robots.map((user,i) => {\r\n        return(\r\n    <Card\r\n    key= {i} \r\n     id={robots[i].id }\r\n     name={robots[i].name}\r\n     email={robots[i].email}\r\n    zipcode={robots[i].address.zipcode}\r\n    phone = {robots[i].phone}\r\n     />\r\n    );\r\n   })\r\n}\r\n   </div>\r\n);\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n    return (\r\n        <div className= 'pa2'>\r\n\r\n        <input className=\" tc pa3 ba b--green bg-lightest-blue\"  onChange={searchChange}  type = 'search' placeholder = 'Search Robots'/>\r\n\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style ={{overflowY:'scroll',border:'1px solid black',height:'600px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default Scroll;\r\n\r\n","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n             hasError : false\r\n        }\r\n    \r\n}\r\ncomponentDidCatch(error, info){\r\n    this.setState({hasError : true})\r\n\r\n}\r\n\r\n\r\nrender() {\r\n         if (this.state.hasError){\r\n        return <h1>Opps its failed ! </h1>\r\n\r\n    }\r\n  return this.props.children\r\n  \r\n}\r\n}\r\n\r\n\r\n\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField } from '../actions';\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchField\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n\r\n        }\r\n    }\r\n    componentDidMount() {\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n            return response.json();\r\n        })\r\n            .then(users => {\r\n                this.setState({ robots: users })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { robots } = this.state;\r\n        const { searchField, onSearchChange } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n\r\n\r\n\r\n        return !robots.length ?\r\n            <h1 className='f1 tc '>Loading</h1> :\r\n\r\n            <div className='tc'>\r\n\r\n                <h1 className=\"f1\">Robots friends</h1>\r\n\r\n                <SearchBox searchChange={onSearchChange} />\r\n\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundary>\r\n\r\n                </Scroll>\r\n\r\n            </div>\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD} from './constants.js';\r\n\r\n\r\n\r\nexport const setSearchField = (text)=> ({\r\n    type : CHANGE_SEARCH_FIELD,\r\n    payload : text\r\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD} from './constants.js';\r\n\r\n\r\nconst initialState = {\r\n    searchField : ''\r\n}\r\n\r\n\r\n\r\nexport const searchRobots = (state=initialState,action={}) => {\r\n    switch(action.type) {\r\n        case  CHANGE_SEARCH_FIELD :\r\n        return  Object.assign({},state,{searchField:action.payload});\r\n        default : //#endregion\r\n        return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux'\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots} from './reducers'\nimport \"tachyons\";\n\n\nconst store = createStore(searchRobots)\n\n\nReactDOM.render(\n\n                  <Provider store = {store}>\n                  <App /> </Provider>,\n                   document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}